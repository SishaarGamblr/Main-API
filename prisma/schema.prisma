// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String  @unique
  phone String  @unique
  name  String?

  profile    Profile?
  followedBy Follows[]        @relation("following")
  following  Follows[]        @relation("follower")
  leagues    UsersInLeagues[]
  wallet     Wallet?
  bets       Wager[]          @relation("bettor")
  takes      Wager[]          @relation("taker")
}

model Follows {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bio String?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model League {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  ownerId Int

  members UsersInLeagues[]
  wagers  Wager[]
}

model UsersInLeagues {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User    @relation(fields: [userId], references: [id])
  userId      Int
  leagues     League  @relation(fields: [leagueId], references: [id])
  leagueId    Int
  isOwner     Boolean
  invitedById Int

  @@id([userId, leagueId])
}

model Wallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User          @relation(fields: [userId], references: [id])
  userId           Int           @unique
  balance          BigInt
  transactionsTo   Transaction[] @relation("to")
  transactionsFrom Transaction[] @relation("from")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from   Wallet @relation("to", fields: [fromId], references: [id])
  fromId Int
  to     Wallet @relation("from", fields: [toId], references: [id])
  toId   Int
}

model Wager {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  league   League @relation(fields: [leagueId], references: [id])
  leagueId Int
  bettor   User   @relation("bettor", fields: [bettorId], references: [id])
  bettorId Int
  taker    User   @relation("taker", fields: [takerId], references: [id])
  takerId  Int

  gameJson Json

  amount Int
  line   String
}
